#ifndef BUFFER_H
#define BUFFER_H
	
#include "constants.h"
#include <project.h>
	
#define BuffSize (SizeLine * LineCount)

uint8 firstBuffer [BuffSize];/* = {
	0x00 | 0x00, 0x00, 0x00, 0x00,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xE0 | 0x05, 0x00, 0x00, 0xff,
	0xFF | 0xFF, 0xFF, 0xFF, 0xFF,
	
	0x00 | 0x00, 0x00, 0x00, 0x00,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xE0 | 0x05, 0x00, 0xff, 0xff,
	0xFF | 0xFF, 0xFF, 0xFF, 0xFF,
	
	0x00 | 0x00, 0x00, 0x00, 0x00,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xE0 | 0x05, 0xff, 0x00, 0xff,
	0xFF | 0xFF, 0xFF, 0xFF, 0xFF,
};*/

void setPixel(int pixelIndex, uint8 b0, uint8 b1, uint8 b2, uint8 b3)
{
	firstBuffer[(pixelIndex * 4) + 0] = b0;
	firstBuffer[(pixelIndex * 4) + 1] = b1;
	firstBuffer[(pixelIndex * 4) + 2] = b2;
	firstBuffer[(pixelIndex * 4) + 3] = b3;
}

void initBuff()
{	
	uint8 b0 = 0xE0 | 0x01;
	uint8 b1 = 0xff;
	uint8 b2 = 0x00;
	uint8 b3 = 0xff;
	int i = 0;
	for (; i < BuffSize / 4; ++i)
	{
		// if (i >= 1 && i <= 32)
		// {
		// 	setPixel(i, b0, 0x00, 0x00, 0xff);
		// 	continue;
		// }
		// b1 -= 0x02;
		// b2 += 0x02;
		// b3 -= 0x02;
		
		// setPixel(i, b0, b1, b2, b3);
		
		if (i % (34) == 0)
		{
			setPixel(i, 0, 0, 0, 0);
			continue;
		}
		
		if (((i + 1) % 34) == 0)
		{
			setPixel(i, 0xff, 0xff, 0xff, 0xff);
			continue;
		}
		
		if (i / 34 >= 0 && i / 34 < 25)
		{
			setPixel(i, b0, 0xff, 0x00, 0x00);
			continue;
		}
		
		if (i / 34 >= 25 && i / 34 < 50)
		{
			setPixel(i, b0, 0x00, 0xff, 0x00);
			continue;
		}
		
		if (i / 34 >= 50 && i / 34 < 75)
		{
			setPixel(i, b0, 0x00, 0x00, 0xff);
			continue;
		}
		
		if (i / 34 >= 75 )
		{
			setPixel(i, b0, 0xff, 0xff, 0xff);
			continue;
		}

	}
}

uint8* bufferPtr()
{
	return (uint8*)(&firstBuffer);
}
	
#endif // BUFFER_H